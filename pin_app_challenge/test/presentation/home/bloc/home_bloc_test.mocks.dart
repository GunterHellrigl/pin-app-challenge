// Mocks generated by Mockito 5.4.4 from annotations
// in pin_app_challenge/test/presentation/home/bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:either_dart/either.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:pin_app_challenge/data/datasources/post_http_datasource.dart'
    as _i2;
import 'package:pin_app_challenge/data/datasources/post_swift_datasource.dart'
    as _i3;
import 'package:pin_app_challenge/data/repositories/post_repository_impl.dart'
    as _i4;
import 'package:pin_app_challenge/domain/entities/api_error.dart' as _i7;
import 'package:pin_app_challenge/domain/entities/post.dart' as _i8;
import 'package:pin_app_challenge_post_sdk/entities/comment.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostHttpDatasource_0 extends _i1.SmartFake
    implements _i2.PostHttpDatasource {
  _FakePostHttpDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostSwiftDatasource_1 extends _i1.SmartFake
    implements _i3.PostSwiftDatasource {
  _FakePostSwiftDatasource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepositoryImpl extends _i1.Mock
    implements _i4.PostRepositoryImpl {
  MockPostRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostHttpDatasource get postHttpDatasource => (super.noSuchMethod(
        Invocation.getter(#postHttpDatasource),
        returnValue: _FakePostHttpDatasource_0(
          this,
          Invocation.getter(#postHttpDatasource),
        ),
      ) as _i2.PostHttpDatasource);

  @override
  _i3.PostSwiftDatasource get postSwiftDatasource => (super.noSuchMethod(
        Invocation.getter(#postSwiftDatasource),
        returnValue: _FakePostSwiftDatasource_1(
          this,
          Invocation.getter(#postSwiftDatasource),
        ),
      ) as _i3.PostSwiftDatasource);

  @override
  _i5.Future<_i6.Either<_i7.ApiError, List<_i8.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.ApiError, List<_i8.Post>>>.value(
            _i9.dummyValue<_i6.Either<_i7.ApiError, List<_i8.Post>>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.ApiError, List<_i8.Post>>>);

  @override
  _i5.Future<_i6.Either<_i7.ApiError, List<_i10.Comment>>> getComments(
          int? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [postId],
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.ApiError, List<_i10.Comment>>>.value(
                _i9.dummyValue<_i6.Either<_i7.ApiError, List<_i10.Comment>>>(
          this,
          Invocation.method(
            #getComments,
            [postId],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.ApiError, List<_i10.Comment>>>);
}
